{
  "prompt": "JPA Entity and Custom Spring Data JPA Repository\n\nTask Description:\nDefine a JPA entity named Product and create a corresponding Spring Data JPA repository interface for it.\n\nThe Product entity should include fields such as id, name, price, and category.\nThe repository interface should extend JpaRepository<Product, Long> to provide standard CRUD operations.\nImplement a custom query method using the @Query annotation in the repository interface.\nThe custom query (written in JPQL) should find all products within a specified price range and belonging to a specific category.\n\nRequirements:\nUse JPA annotations for the entity definition.\nUse Spring Data JPA for the repository.",
  "language": "java",
  "ground": "```java\npackage com.example.jpademo;\n\nimport jakarta.persistence.*;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * Combined Product entity and repository in a single file for pure Spring approach.\n * Contains both the JPA entity definition and repository interface.\n */\n\n/**\n * Product entity representing a product in the system.\n * This class is mapped to the \"products\" table in the database.\n */\n@Entity\n@Table(name = \"products\")\nclass Product {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, length = 100)\n    private String name;\n\n    @Column(length = 500)\n    private String description;\n\n    @Column(nullable = false, precision = 10, scale = 2)\n    private BigDecimal price;\n\n    @Column(nullable = false)\n    private String category;\n\n    @Column(name = \"stock_quantity\", nullable = false)\n    private Integer stockQuantity;\n\n    @Column(name = \"is_available\")\n    private boolean available;\n\n    // Default constructor required by JPA\n    public Product() {\n    }\n\n    // Constructor with fields\n    public Product(String name, String description, BigDecimal price,\n                   String category, Integer stockQuantity, boolean available) {\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.category = category;\n        this.stockQuantity = stockQuantity;\n        this.available = available;\n    }\n\n    // Getters and Setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public BigDecimal getPrice() {\n        return price;\n    }\n\n    public void setPrice(BigDecimal price) {\n        this.price = price;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n\n    public void setCategory(String category) {\n        this.category = category;\n    }\n\n    public Integer getStockQuantity() {\n        return stockQuantity;\n    }\n\n    public void setStockQuantity(Integer stockQuantity) {\n        this.stockQuantity = stockQuantity;\n    }\n\n    public boolean isAvailable() {\n        return available;\n    }\n\n    public void setAvailable(boolean available) {\n        this.available = available;\n    }\n\n    @Override\n    public String toString() {\n        return \"Product{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", description='\" + description + '\\'' +\n                \", price=\" + price +\n                \", category='\" + category + '\\'' +\n                \", stockQuantity=\" + stockQuantity +\n                \", available=\" + available +\n                '}';\n    }\n}\n\n/**\n * Repository interface for Product entity.\n * Extends JpaRepository to inherit standard CRUD operations.\n * Includes custom query methods using JPQL.\n */\n@Repository\ninterface ProductRepository extends JpaRepository<Product, Long> {\n\n    // Find products by category\n    List<Product> findByCategory(String category);\n\n    // Find products by availability\n    List<Product> findByAvailable(boolean available);\n\n    // Find products by name containing the given string (case insensitive)\n    List<Product> findByNameContainingIgnoreCase(String name);\n\n    // Custom query to find products within a price range and specific category\n    @Query(\"SELECT p FROM Product p WHERE p.price BETWEEN :minPrice AND :maxPrice AND p.category = :category\")\n    List<Product> findByPriceRangeAndCategory(\n            @Param(\"minPrice\") BigDecimal minPrice,\n            @Param(\"maxPrice\") BigDecimal maxPrice,\n            @Param(\"category\") String category);\n\n    // Custom query to find available products with stock below threshold in a specific category\n    @Query(\"SELECT p FROM Product p WHERE p.available = true AND p.stockQuantity < :threshold AND p.category = :category\")\n    List<Product> findAvailableProductsWithLowStockByCategory(\n            @Param(\"threshold\") Integer threshold,\n            @Param(\"category\") String category);\n\n    // Custom query to find top selling products (those with lowest stock) in a category\n    @Query(value = \"SELECT p FROM Product p WHERE p.category = :category AND p.available = true ORDER BY p.stockQuantity ASC\",\n            countQuery = \"SELECT count(p) FROM Product p WHERE p.category = :category AND p.available = true\")\n    List<Product> findTopSellingProductsByCategory(\n            @Param(\"category\") String category,\n            org.springframework.data.domain.Pageable pageable);\n\n    // Custom query with native SQL to find products with name matching pattern\n    @Query(value = \"SELECT * FROM products p WHERE p.name LIKE %:pattern% AND p.is_available = true\", nativeQuery = true)\n    List<Product> findByNamePatternNative(@Param(\"pattern\") String pattern);\n\n    // Find the most expensive product in a category using derived method name\n    Optional<Product> findFirstByCategoryOrderByPriceDesc(String category);\n\n    // Custom query to calculate average price by category\n    @Query(\"SELECT AVG(p.price) FROM Product p WHERE p.category = :category\")\n    BigDecimal calculateAveragePriceByCategory(@Param(\"category\") String category);\n\n    // Custom query to count products by category and price range\n    @Query(\"SELECT COUNT(p) FROM Product p WHERE p.category = :category AND p.price BETWEEN :minPrice AND :maxPrice\")\n    Long countByCategoryAndPriceRange(\n            @Param(\"category\") String category,\n            @Param(\"minPrice\") BigDecimal minPrice,\n            @Param(\"maxPrice\") BigDecimal maxPrice);\n}\n\n\n```",
  "test": "```java\npackage com.example.jpademo;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.test.context.TestPropertySource;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Comprehensive test suite for ProductService.\n * Tests both standard JPA repository methods and custom query methods.\n * Contains embedded test configuration properties.\n */\n@DataJpaTest\n@TestPropertySource(properties = {\n    \"spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\",\n    \"spring.datasource.driverClassName=org.h2.Driver\",\n    \"spring.datasource.username=sa\",\n    \"spring.datasource.password=\",\n    \"spring.jpa.database-platform=org.hibernate.dialect.H2Dialect\",\n    \"spring.jpa.hibernate.ddl-auto=create-drop\",\n    \"spring.jpa.show-sql=true\",\n    \"spring.jpa.properties.hibernate.format_sql=true\",\n    \"spring.jpa.open-in-view=false\",\n    \"logging.level.org.hibernate.SQL=DEBUG\",\n    \"logging.level.org.springframework.test=INFO\"\n})\npublic class ProductServiceTest {\n\n    @Autowired\n    private TestEntityManager entityManager;\n\n    @Autowired\n    private ProductRepository productRepository;\n\n    // Test data\n    private Product laptop;\n    private Product smartphone;\n    private Product tablet;\n    private Product headphones;\n    private Product speaker;\n\n    @BeforeEach\n    public void setup() {\n        // Clear any existing data\n        productRepository.deleteAll();\n        \n        // Create test products\n        laptop = new Product(\n                \"MacBook Pro\", \n                \"High-performance laptop for professionals\", \n                new BigDecimal(\"1999.99\"), \n                \"Electronics\", \n                50, \n                true);\n        \n        smartphone = new Product(\n                \"iPhone 14\", \n                \"Latest smartphone with advanced features\", \n                new BigDecimal(\"999.99\"), \n                \"Electronics\", \n                100, \n                true);\n        \n        tablet = new Product(\n                \"iPad Pro\", \n                \"Powerful tablet for creative work\", \n                new BigDecimal(\"799.99\"), \n                \"Electronics\", \n                75, \n                true);\n        \n        headphones = new Product(\n                \"AirPods Pro\", \n                \"Wireless noise-cancelling earbuds\", \n                new BigDecimal(\"249.99\"), \n                \"Audio\", \n                25, \n                true);\n        \n        speaker = new Product(\n                \"Bluetooth Speaker\", \n                \"Portable wireless speaker\", \n                new BigDecimal(\"89.99\"), \n                \"Audio\", \n                0, \n                false);\n        \n        // Persist test data\n        entityManager.persist(laptop);\n        entityManager.persist(smartphone);\n        entityManager.persist(tablet);\n        entityManager.persist(headphones);\n        entityManager.persist(speaker);\n        entityManager.flush();\n    }\n\n    // Test standard JPA repository methods\n    \n    @Test\n    public void testFindAll() {\n        List<Product> products = productRepository.findAll();\n        assertEquals(5, products.size(), \"Should find all 5 products\");\n    }\n    \n    @Test\n    public void testFindById() {\n        Optional<Product> foundProduct = productRepository.findById(laptop.getId());\n        assertTrue(foundProduct.isPresent(), \"Product should be found by ID\");\n        assertEquals(\"MacBook Pro\", foundProduct.get().getName(), \"Product name should match\");\n    }\n    \n    @Test\n    public void testSave() {\n        Product newProduct = new Product(\n                \"Smart Watch\", \n                \"Fitness tracking watch\", \n                new BigDecimal(\"199.99\"), \n                \"Wearables\", \n                30, \n                true);\n        \n        Product savedProduct = productRepository.save(newProduct);\n        assertNotNull(savedProduct.getId(), \"Saved product should have an ID\");\n        \n        Optional<Product> foundProduct = productRepository.findById(savedProduct.getId());\n        assertTrue(foundProduct.isPresent(), \"Product should be found after saving\");\n        assertEquals(\"Smart Watch\", foundProduct.get().getName(), \"Product name should match\");\n    }\n    \n    @Test\n    public void testDelete() {\n        productRepository.delete(laptop);\n        Optional<Product> foundProduct = productRepository.findById(laptop.getId());\n        assertFalse(foundProduct.isPresent(), \"Product should be deleted\");\n    }\n    \n    // Test derived query methods\n    \n    @Test\n    public void testFindByCategory() {\n        List<Product> electronicsProducts = productRepository.findByCategory(\"Electronics\");\n        assertEquals(3, electronicsProducts.size(), \"Should find 3 electronics products\");\n        \n        List<Product> audioProducts = productRepository.findByCategory(\"Audio\");\n        assertEquals(2, audioProducts.size(), \"Should find 2 audio products\");\n        \n        List<Product> wearablesProducts = productRepository.findByCategory(\"Wearables\");\n        assertEquals(0, wearablesProducts.size(), \"Should find 0 wearables products\");\n    }\n    \n    @Test\n    public void testFindByAvailable() {\n        List<Product> availableProducts = productRepository.findByAvailable(true);\n        assertEquals(4, availableProducts.size(), \"Should find 4 available products\");\n        \n        List<Product> unavailableProducts = productRepository.findByAvailable(false);\n        assertEquals(1, unavailableProducts.size(), \"Should find 1 unavailable product\");\n    }\n    \n    @Test\n    public void testFindByNameContainingIgnoreCase() {\n        List<Product> proProducts = productRepository.findByNameContainingIgnoreCase(\"Pro\");\n        assertEquals(3, proProducts.size(), \"Should find 3 products with 'Pro' in the name\");\n        \n        List<Product> podProducts = productRepository.findByNameContainingIgnoreCase(\"pod\");\n        assertEquals(1, podProducts.size(), \"Should find 1 product with 'pod' in the name\");\n        \n        List<Product> nonExistentProducts = productRepository.findByNameContainingIgnoreCase(\"nonexistent\");\n        assertEquals(0, nonExistentProducts.size(), \"Should find 0 products with 'nonexistent' in the name\");\n    }\n    \n    // Test custom query methods\n    \n    @Test\n    public void testFindByPriceRangeAndCategory() {\n        List<Product> products = productRepository.findByPriceRangeAndCategory(\n                new BigDecimal(\"700.00\"), \n                new BigDecimal(\"1500.00\"), \n                \"Electronics\");\n        \n        assertEquals(2, products.size(), \"Should find 2 electronics products in the price range\");\n        assertTrue(products.stream().anyMatch(p -> p.getName().equals(\"iPad Pro\")), \n                \"Should include iPad Pro\");\n        assertFalse(products.stream().anyMatch(p -> p.getName().equals(\"MacBook Pro\")), \n                \"Should not include MacBook Pro (price too high)\");\n    }\n    \n    @Test\n    public void testFindAvailableProductsWithLowStockByCategory() {\n        List<Product> products = productRepository.findAvailableProductsWithLowStockByCategory(30, \"Audio\");\n        \n        assertEquals(1, products.size(), \"Should find 1 audio product with stock below 30\");\n        assertEquals(\"AirPods Pro\", products.get(0).getName(), \"Should be AirPods Pro\");\n    }\n    \n    @Test\n    public void testFindTopSellingProductsByCategory() {\n        // Create a PageRequest for the first 2 results\n        PageRequest pageRequest = PageRequest.of(0, 2);\n        \n        List<Product> products = productRepository.findTopSellingProductsByCategory(\"Electronics\", pageRequest);\n        \n        assertEquals(2, products.size(), \"Should find exactly 2 electronics products\");\n        assertEquals(\"MacBook Pro\", products.get(0).getName(), \"First product should be MacBook Pro (lowest stock)\");\n        assertEquals(\"iPad Pro\", products.get(1).getName(), \"Second product should be iPad Pro (second lowest stock)\");\n    }\n    \n    @Test\n    public void testFindByNamePatternNative() {\n        List<Product> products = productRepository.findByNamePatternNative(\"Phone\");\n        \n        assertEquals(1, products.size(), \"Should find 1 product matching 'Phone'\");\n        assertEquals(\"iPhone 14\", products.get(0).getName(), \"Should be iPhone 14\");\n        \n        // Test that unavailable products are not returned\n        List<Product> speakerProducts = productRepository.findByNamePatternNative(\"Speaker\");\n        assertEquals(0, speakerProducts.size(), \"Should not find 'Speaker' as it's unavailable\");\n    }\n    \n    @Test\n    public void testFindMostExpensiveProductInCategory() {\n        Optional<Product> product = productRepository.findFirstByCategoryOrderByPriceDesc(\"Electronics\");\n        \n        assertTrue(product.isPresent(), \"Should find most expensive electronics product\");\n        assertEquals(\"MacBook Pro\", product.get().getName(), \"Most expensive should be MacBook Pro\");\n    }\n    \n    @Test\n    public void testCalculateAveragePriceByCategory() {\n        BigDecimal avgPrice = productRepository.calculateAveragePriceByCategory(\"Electronics\");\n        \n        // Calculate expected average: (1999.99 + 999.99 + 799.99) / 3 = 1266.66\n        BigDecimal expected = new BigDecimal(\"1266.66\");\n        \n        // Use compareTo with a small delta for floating-point comparison\n        assertTrue(avgPrice.subtract(expected).abs().compareTo(new BigDecimal(\"0.01\")) < 0,\n                \"Average price should be approximately 1266.66\");\n    }\n    \n    @Test\n    public void testCountByCategoryAndPriceRange() {\n        Long count = productRepository.countByCategoryAndPriceRange(\n                \"Electronics\", \n                new BigDecimal(\"500.00\"), \n                new BigDecimal(\"1000.00\"));\n        \n        assertEquals(2L, count, \"Should count 2 electronics products in the price range\");\n    }\n    \n    // Edge cases and boundary tests\n    \n    @Test\n    public void testEmptyRepository() {\n        // Clear all data\n        productRepository.deleteAll();\n        \n        List<Product> products = productRepository.findAll();\n        assertEquals(0, products.size(), \"Repository should be empty\");\n        \n        Optional<Product> mostExpensive = productRepository.findFirstByCategoryOrderByPriceDesc(\"Electronics\");\n        assertFalse(mostExpensive.isPresent(), \"Should not find any product in empty repository\");\n    }\n    \n    @Test\n    public void testExactPriceBoundaries() {\n        List<Product> products = productRepository.findByPriceRangeAndCategory(\n                new BigDecimal(\"799.99\"), // Exactly iPad Pro's price\n                new BigDecimal(\"999.99\"), // Exactly iPhone's price\n                \"Electronics\");\n        \n        assertEquals(2, products.size(), \"Should include products at the exact boundary prices\");\n        assertTrue(products.stream().anyMatch(p -> p.getName().equals(\"iPad Pro\")), \n                \"Should include iPad Pro (at lower boundary)\");\n        assertTrue(products.stream().anyMatch(p -> p.getName().equals(\"iPhone 14\")), \n                \"Should include iPhone 14 (at upper boundary)\");\n    }\n}\n\n\n```",
  "dependencies": "```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    \n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.1.0</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    \n    <groupId>com.example</groupId>\n    <artifactId>jpa-demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>JPA Repository Demo</name>\n    <description>Demo project for Spring Data JPA with custom queries</description>\n    \n    <properties>\n        <java.version>17</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n    \n    <dependencies>\n        <!-- Spring Boot Starter Data JPA -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        \n        <!-- Spring Boot Starter Web (optional, for RESTful API) -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        \n        <!-- H2 Database for development and testing -->\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        \n        <!-- Spring Boot Starter Test -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    \n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n\n```",
  "bash": "```bash\n\n\n#!/bin/bash\n# Shell script to run and validate the Maven project and its test cases\n# Project: jpa-demo\n\nset -e  # Exit on any error\n\n# Color codes for output formatting\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_header() {\n    echo -e \"\\n${BLUE}================================${NC}\"\n    echo -e \"${BLUE} $1${NC}\"\n    echo -e \"${BLUE}================================${NC}\\n\"\n}\n\n# Function to check if Maven is installed\ncheck_maven() {\n    print_status \"Checking Maven installation...\"\n    if ! command -v mvn &> /dev/null; then\n        print_error \"Maven is not installed or not in PATH\"\n        print_error \"Please install Maven and ensure it's in your PATH\"\n        exit 1\n    fi\n    \n    mvn_version=$(mvn -version | head -n 1)\n    print_success \"Maven found: $mvn_version\"\n}\n\n# Function to check Java version\ncheck_java() {\n    print_status \"Checking Java installation...\"\n    if ! command -v java &> /dev/null; then\n        print_error \"Java is not installed or not in PATH\"\n        exit 1\n    fi\n    \n    java_version=$(java -version 2>&1 | head -n 1)\n    print_success \"Java found: $java_version\"\n}\n\n# Function to validate project structure\nvalidate_project_structure() {\n    print_status \"Validating project structure...\"\n    \n\n\n    required_files=(\n        \"pom.xml\"\n        \"src/main/java/com/example/jpademo/JpaDemoApplication.java\"\n        \"src/test/java/com/example/jpademo/ProductServiceTest.java\"\n    )\n\n    for file in \"${required_files[@]}\"; do\n        if [[ ! -f \"$file\" ]]; then\n            print_error \"Required file missing: $file\"\n            exit 1\n        fi\n    done\n\n    print_success \"Project structure validation passed\"\n}\n\n# Function to clean the project\nclean_project() {\n    print_status \"Cleaning project...\"\n    if mvn clean > /dev/null 2>&1; then\n        print_success \"Project cleaned successfully\"\n    else\n        print_error \"Failed to clean project\"\n        exit 1\n    fi\n}\n\n# Function to compile the project\ncompile_project() {\n    print_status \"Compiling project...\"\n    if mvn compile -q; then\n        print_success \"Project compiled successfully\"\n    else\n        print_error \"Compilation failed\"\n        exit 1\n    fi\n}\n\n# Function to compile test sources\ncompile_tests() {\n    print_status \"Compiling test sources...\"\n    if mvn test-compile -q; then\n        print_success \"Test sources compiled successfully\"\n    else\n        print_error \"Test compilation failed\"\n        exit 1\n    fi\n}\n\n# Function to run tests\nrun_tests() {\n    print_status \"Running tests...\"\n    \n\n    # Run tests and capture output\n    if mvn test -q > test_output.log 2>&1; then\n        print_success \"All tests passed\"\n\n        # Extract test results from Surefire reports\n        for report in target/surefire-reports/TEST-com.example.jpademo.ProductServiceTest.xml; do\n            if [[ -f \"$report\" ]]; then\n                test_count=$(grep -o 'tests=\"[0-9]*\"' \"$report\" | grep -o '[0-9]*')\n                failures=$(grep -o 'failures=\"[0-9]*\"' \"$report\" | grep -o '[0-9]*')\n                errors=$(grep -o 'errors=\"[0-9]*\"' \"$report\" | grep -o '[0-9]*')\n                print_success \"Test Results ($report): $test_count tests run, $failures failures, $errors errors\"\n            fi\n        done\n    else\n        print_error \"Tests failed\"\n        echo \"Test output:\"\n        cat test_output.log\n        exit 1\n    fi\n}\n\n# Function to validate test coverage\nvalidate_test_coverage() {\n    print_status \"Validating test coverage...\"\n    \n\n    # Check if test classes exist\n    if [[ -f \"target/test-classes/com/example/jpademo/ProductServiceTest.class\" ]]; then\n        print_success \"Test classes found and compiled\"\n    else\n        print_warning \"Test classes not found in expected location\"\n    fi\n\n    # Check if main classes exist\n    if [[ -f \"target/classes/com/example/jpademo/JpaDemoApplication.class\" ]]; then\n        print_success \"Main classes found and compiled\"\n    else\n        print_error \"Main classes not found\"\n        exit 1\n    fi\n}\n\n# Function to run dependency check\ncheck_dependencies() {\n    print_status \"Checking project dependencies...\"\n    \n    if mvn dependency:resolve -q > /dev/null 2>&1; then\n        print_success \"All dependencies resolved successfully\"\n    else\n        print_error \"Failed to resolve dependencies\"\n        exit 1\n    fi\n}\n\n\n# Function to validate specific test categories\nvalidate_test_categories() {\n    print_status \"Validating test categories...\"\n\n    categories=(\n        \"ProductServiceTest\"\n    )\n\n    for category in \"${categories[@]}\"; do\n        if mvn test -Dtest=\"$category\" -q > /dev/null 2>&1; then\n            print_success \"Test category '$category' passed\"\n        else\n            print_error \"Test category '$category' failed\"\n            exit 1\n        fi\n    done\n}\n\n# Function to generate project report\ngenerate_report() {\n    print_status \"Generating project report...\"\n    \n\n    echo \"Project Validation Report\" > validation_report.txt\n    echo \"=========================\" >> validation_report.txt\n    echo \"Date: $(date)\" >> validation_report.txt\n    echo \"Project: jpa-demo\" >> validation_report.txt\n    echo \"\" >> validation_report.txt\n\n    echo \"Maven Version:\" >> validation_report.txt\n    mvn -version >> validation_report.txt 2>&1\n    echo \"\" >> validation_report.txt\n\n    echo \"Java Version:\" >> validation_report.txt\n    java -version >> validation_report.txt 2>&1\n    echo \"\" >> validation_report.txt\n\n    echo \"Dependencies:\" >> validation_report.txt\n    mvn dependency:list -q >> validation_report.txt 2>&1\n    echo \"\" >> validation_report.txt\n\n    for report in target/surefire-reports/TEST-com.example.jpademo.ProductServiceTest.xml; do\n        if [[ -f \"$report\" ]]; then\n            echo \"Test Results Summary ($report):\" >> validation_report.txt\n            grep -E \"(tests=|failures=|errors=|time=)\" \"$report\" >> validation_report.txt\n        fi\n    done\n\n    print_success \"Report generated: validation_report.txt\"\n}\n\n# Function to cleanup temporary files\ncleanup() {\n    print_status \"Cleaning up temporary files...\"\n    rm -f test_output.log\n    print_success \"Cleanup completed\"\n}\n\n# Main execution function\n\nmain() {\n    print_header \"Maven Project Validation Script\"\n    print_status \"Starting validation for jpa-demo project...\"\n\n    # Pre-flight checks\n    check_java\n    check_maven\n    validate_project_structure\n\n    print_header \"Building and Testing Project\"\n\n    # Build and test\n    clean_project\n    check_dependencies\n    compile_project\n    compile_tests\n    validate_test_coverage\n    run_tests\n    validate_test_categories\n\n    print_header \"Generating Report\"\n    generate_report\n\n    print_header \"Validation Complete\"\n    print_success \"All validations passed successfully!\"\n    print_success \"The jpa-demo project is working correctly.\"\n\n    cleanup\n}\n\n# Trap to ensure cleanup on exit\ntrap cleanup EXIT\n\n# Run main function\nmain \"$@\"\n\n\n```",
  "timeout": 180
}